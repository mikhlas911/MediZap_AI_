/*
  # Fix Walk-Ins Identity Column - Final Solution

  1. Remove any attempts to set defaults on identity columns
  2. Ensure proper identity column configuration
  3. Fix RLS policies for public insert access
  4. Do NOT include 'id' field in any insert operations
*/

-- Step 1: Check current column configuration and fix if needed
DO $$
DECLARE
    is_identity boolean;
    column_default text;
BEGIN
    -- Get current column information
    SELECT 
        is_identity = 'YES',
        column_default
    INTO is_identity, column_default
    FROM information_schema.columns 
    WHERE table_name = 'walk_ins' 
    AND column_name = 'id';

    RAISE NOTICE 'Current state - Is identity: %, Default: %', is_identity, column_default;

    -- If there's a default set on an identity column, remove it
    IF is_identity AND column_default IS NOT NULL THEN
        RAISE NOTICE 'Removing default from identity column';
        ALTER TABLE walk_ins ALTER COLUMN id DROP DEFAULT;
    END IF;

    -- If it's not an identity column, convert it properly
    IF NOT is_identity THEN
        RAISE NOTICE 'Converting to identity column';
        
        -- Remove any existing default first
        BEGIN
            ALTER TABLE walk_ins ALTER COLUMN id DROP DEFAULT;
        EXCEPTION
            WHEN OTHERS THEN NULL;
        END;

        -- Drop any existing sequence
        DROP SEQUENCE IF EXISTS walk_ins_id_seq CASCADE;

        -- Convert to identity column
        ALTER TABLE walk_ins ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;
    END IF;
END $$;

-- Step 2: Set identity sequence to continue from existing data
DO $$
DECLARE
    max_id bigint;
    seq_name text;
BEGIN
    SELECT COALESCE(MAX(id), 0) INTO max_id FROM walk_ins;
    SELECT pg_get_serial_sequence('walk_ins', 'id') INTO seq_name;
    
    IF seq_name IS NOT NULL THEN
        PERFORM setval(seq_name, max_id + 1);
        RAISE NOTICE 'Identity sequence set to start from %', max_id + 1;
    END IF;
END $$;

-- Step 3: Ensure RLS is enabled
ALTER TABLE walk_ins ENABLE ROW LEVEL SECURITY;

-- Step 4: Drop all existing policies and recreate them properly
DO $$
DECLARE
    policy_record RECORD;
BEGIN
    FOR policy_record IN 
        SELECT policyname FROM pg_policies WHERE tablename = 'walk_ins'
    LOOP
        EXECUTE 'DROP POLICY IF EXISTS "' || policy_record.policyname || '" ON walk_ins';
    END LOOP;
END $$;

-- Step 5: Create proper RLS policies
-- Policy for public insert (for QR code registrations)
CREATE POLICY "walk_ins_public_insert"
  ON walk_ins
  FOR INSERT
  TO public
  WITH CHECK (
    clinic_id IS NOT NULL 
    AND EXISTS (
      SELECT 1 FROM clinics 
      WHERE id = clinic_id 
      AND is_active = true
    )
  );

-- Policy for authenticated users to view their clinic's walk-ins
CREATE POLICY "walk_ins_clinic_staff_select"
  ON walk_ins
  FOR SELECT
  TO authenticated
  USING (
    clinic_id IN (
      SELECT clinic_users.clinic_id
      FROM clinic_users
      WHERE clinic_users.user_id = auth.uid() 
      AND clinic_users.is_active = true
    )
  );

-- Policy for authenticated users to update their clinic's walk-ins
CREATE POLICY "walk_ins_clinic_staff_update"
  ON walk_ins
  FOR UPDATE
  TO authenticated
  USING (
    clinic_id IN (
      SELECT clinic_users.clinic_id
      FROM clinic_users
      WHERE clinic_users.user_id = auth.uid() 
      AND clinic_users.is_active = true
    )
  );

-- Policy for authenticated users to delete their clinic's walk-ins
CREATE POLICY "walk_ins_clinic_staff_delete"
  ON walk_ins
  FOR DELETE
  TO authenticated
  USING (
    clinic_id IN (
      SELECT clinic_users.clinic_id
      FROM clinic_users
      WHERE clinic_users.user_id = auth.uid() 
      AND clinic_users.is_active = true
    )
  );

-- Step 6: Grant necessary permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON walk_ins TO public;
GRANT SELECT, INSERT, UPDATE, DELETE ON walk_ins TO authenticated;

-- Step 7: Grant sequence permissions if sequence exists
DO $$
DECLARE
    seq_name text;
BEGIN
    SELECT pg_get_serial_sequence('walk_ins', 'id') INTO seq_name;
    
    IF seq_name IS NOT NULL THEN
        EXECUTE 'GRANT USAGE, SELECT ON SEQUENCE ' || seq_name || ' TO public';
        EXECUTE 'GRANT USAGE, SELECT ON SEQUENCE ' || seq_name || ' TO authenticated';
    END IF;
END $$;