/*
  # Fix Walk-Ins Identity Column Issues - Final Fix

  1. Database Changes
    - Remove any default value attempts on identity column
    - Ensure identity column is properly configured
    - Do NOT set any defaults on identity columns
    - Clean up any conflicting sequences

  2. Security
    - Maintain existing RLS policies
    - Ensure proper permissions
*/

-- Step 1: Check if id column is an identity column and handle accordingly
DO $$
DECLARE
    is_identity boolean;
    has_default boolean;
BEGIN
    -- Check if id column is an identity column
    SELECT is_identity = 'YES' INTO is_identity
    FROM information_schema.columns 
    WHERE table_name = 'walk_ins' 
    AND column_name = 'id';

    -- Check if there's a default value set
    SELECT column_default IS NOT NULL INTO has_default
    FROM information_schema.columns 
    WHERE table_name = 'walk_ins' 
    AND column_name = 'id';

    RAISE NOTICE 'Identity column status: %, Has default: %', is_identity, has_default;

    -- If it's an identity column but has a default, remove the default
    IF is_identity AND has_default THEN
        BEGIN
            ALTER TABLE walk_ins ALTER COLUMN id DROP DEFAULT;
            RAISE NOTICE 'Removed default from identity column';
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Could not remove default: %', SQLERRM;
        END;
    END IF;

    -- If it's not an identity column, convert it properly
    IF NOT is_identity THEN
        -- First, drop any existing default
        BEGIN
            ALTER TABLE walk_ins ALTER COLUMN id DROP DEFAULT;
        EXCEPTION
            WHEN OTHERS THEN
                -- Ignore if no default exists
                NULL;
        END;

        -- Drop any existing sequence
        BEGIN
            DROP SEQUENCE IF EXISTS walk_ins_id_seq CASCADE;
        EXCEPTION
            WHEN OTHERS THEN
                -- Ignore if sequence doesn't exist
                NULL;
        END;

        -- Convert to identity column
        BEGIN
            ALTER TABLE walk_ins ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;
            RAISE NOTICE 'Successfully converted to identity column';
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Could not convert to identity: %', SQLERRM;
        END;
    END IF;
END $$;

-- Step 2: Set the identity sequence to continue from existing data
DO $$
DECLARE
    max_id bigint;
    seq_name text;
BEGIN
    -- Get the current max id
    SELECT COALESCE(MAX(id), 0) INTO max_id FROM walk_ins;
    
    -- Get the sequence name for the identity column
    SELECT pg_get_serial_sequence('walk_ins', 'id') INTO seq_name;
    
    IF seq_name IS NOT NULL THEN
        -- Set the sequence to start from max_id + 1
        PERFORM setval(seq_name, max_id + 1);
        RAISE NOTICE 'Set identity sequence to start from %', max_id + 1;
    ELSE
        RAISE NOTICE 'No sequence found for identity column';
    END IF;
END $$;

-- Step 3: Ensure RLS is properly configured
ALTER TABLE walk_ins ENABLE ROW LEVEL SECURITY;

-- Step 4: Grant necessary permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON walk_ins TO public;
GRANT SELECT, INSERT, UPDATE, DELETE ON walk_ins TO authenticated;

-- Step 5: Ensure sequence permissions (if sequence exists)
DO $$
DECLARE
    seq_name text;
BEGIN
    SELECT pg_get_serial_sequence('walk_ins', 'id') INTO seq_name;
    
    IF seq_name IS NOT NULL THEN
        EXECUTE 'GRANT USAGE, SELECT ON SEQUENCE ' || seq_name || ' TO public';
        EXECUTE 'GRANT USAGE, SELECT ON SEQUENCE ' || seq_name || ' TO authenticated';
        RAISE NOTICE 'Granted permissions on sequence %', seq_name;
    END IF;
END $$;